// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 1 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
// start dotnet restore  /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in D:\Users\Bart\VS_Code_Projects\DiscreteKnapsackProblem\bin\Release\net5.0\48a05c4f-c36a-41dc-8d5e-963b40418fe6
// command took 1,03s and exited with 0
// start dotnet build -c Release  --no-restore /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 in D:\Users\Bart\VS_Code_Projects\DiscreteKnapsackProblem\bin\Release\net5.0\48a05c4f-c36a-41dc-8d5e-963b40418fe6
// command took 1,86s and exited with 0
// ***** Done, took 00:00:02 (2.95 sec)   *****
// Found 1 benchmarks:
//   KnapsackSolverBenchmark.GetSolverBenchmark: DefaultJob

// **************************
// Benchmark: KnapsackSolverBenchmark.GetSolverBenchmark: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "48a05c4f-c36a-41dc-8d5e-963b40418fe6.dll" --benchmarkName "DiscreteKnapsackProblem.KnapsackSolverBenchmark.GetSolverBenchmark" --job "Default" --benchmarkId 0 in D:\Users\Bart\VS_Code_Projects\DiscreteKnapsackProblem\bin\Release\net5.0\48a05c4f-c36a-41dc-8d5e-963b40418fe6\bin\Release\netcoreapp5.0
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET Core 5.0.5 (CoreCLR 5.0.521.16609, CoreFX 5.0.521.16609), X64 RyuJIT
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 154600.00 ns, 154.6000 us/op
WorkloadJitting  1: 1 op, 375418900.00 ns, 375.4189 ms/op

WorkloadWarmup   1: 1 op, 315062600.00 ns, 315.0626 ms/op
WorkloadWarmup   2: 1 op, 316160800.00 ns, 316.1608 ms/op
WorkloadWarmup   3: 1 op, 315932100.00 ns, 315.9321 ms/op
WorkloadWarmup   4: 1 op, 315751900.00 ns, 315.7519 ms/op
WorkloadWarmup   5: 1 op, 320892300.00 ns, 320.8923 ms/op
WorkloadWarmup   6: 1 op, 319871100.00 ns, 319.8711 ms/op

// BeforeActualRun
WorkloadActual   1: 1 op, 315806300.00 ns, 315.8063 ms/op
WorkloadActual   2: 1 op, 317329500.00 ns, 317.3295 ms/op
WorkloadActual   3: 1 op, 315523100.00 ns, 315.5231 ms/op
WorkloadActual   4: 1 op, 328283900.00 ns, 328.2839 ms/op
WorkloadActual   5: 1 op, 331729400.00 ns, 331.7294 ms/op
WorkloadActual   6: 1 op, 322462600.00 ns, 322.4626 ms/op
WorkloadActual   7: 1 op, 319733400.00 ns, 319.7334 ms/op
WorkloadActual   8: 1 op, 319638600.00 ns, 319.6386 ms/op
WorkloadActual   9: 1 op, 319155600.00 ns, 319.1556 ms/op
WorkloadActual  10: 1 op, 320868900.00 ns, 320.8689 ms/op
WorkloadActual  11: 1 op, 316539400.00 ns, 316.5394 ms/op
WorkloadActual  12: 1 op, 314938800.00 ns, 314.9388 ms/op
WorkloadActual  13: 1 op, 314693000.00 ns, 314.6930 ms/op
WorkloadActual  14: 1 op, 315024300.00 ns, 315.0243 ms/op
WorkloadActual  15: 1 op, 318053400.00 ns, 318.0534 ms/op

// AfterActualRun
WorkloadResult   1: 1 op, 315806300.00 ns, 315.8063 ms/op
WorkloadResult   2: 1 op, 317329500.00 ns, 317.3295 ms/op
WorkloadResult   3: 1 op, 315523100.00 ns, 315.5231 ms/op
WorkloadResult   4: 1 op, 322462600.00 ns, 322.4626 ms/op
WorkloadResult   5: 1 op, 319733400.00 ns, 319.7334 ms/op
WorkloadResult   6: 1 op, 319638600.00 ns, 319.6386 ms/op
WorkloadResult   7: 1 op, 319155600.00 ns, 319.1556 ms/op
WorkloadResult   8: 1 op, 320868900.00 ns, 320.8689 ms/op
WorkloadResult   9: 1 op, 316539400.00 ns, 316.5394 ms/op
WorkloadResult  10: 1 op, 314938800.00 ns, 314.9388 ms/op
WorkloadResult  11: 1 op, 314693000.00 ns, 314.6930 ms/op
WorkloadResult  12: 1 op, 315024300.00 ns, 315.0243 ms/op
WorkloadResult  13: 1 op, 318053400.00 ns, 318.0534 ms/op
GC:  0 0 0 288 1
Threading:  2 0 1

// AfterAll
// Benchmark Process 73956 has exited with code 0

Mean = 317.674 ms, StdErr = 0.700 ms (0.22%), N = 13, StdDev = 2.525 ms
Min = 314.693 ms, Q1 = 315.523 ms, Median = 317.329 ms, Q3 = 319.639 ms, Max = 322.463 ms
IQR = 4.115 ms, LowerFence = 309.350 ms, UpperFence = 325.812 ms
ConfidenceInterval = [314.651 ms; 320.698 ms] (CI 99.9%), Margin = 3.023 ms (0.95% of Mean)
Skewness = 0.37, Kurtosis = 1.68, MValue = 2

// ***** BenchmarkRunner: Finish  *****

// * Export *
  BenchmarkDotNet.Artifacts\results\DiscreteKnapsackProblem.KnapsackSolverBenchmark-report.csv
  BenchmarkDotNet.Artifacts\results\DiscreteKnapsackProblem.KnapsackSolverBenchmark-report-github.md
  BenchmarkDotNet.Artifacts\results\DiscreteKnapsackProblem.KnapsackSolverBenchmark-report.html

// * Detailed results *
KnapsackSolverBenchmark.GetSolverBenchmark: DefaultJob
Runtime = .NET Core 5.0.5 (CoreCLR 5.0.521.16609, CoreFX 5.0.521.16609), X64 RyuJIT; GC = Concurrent Workstation
Mean = 317.674 ms, StdErr = 0.700 ms (0.22%), N = 13, StdDev = 2.525 ms
Min = 314.693 ms, Q1 = 315.523 ms, Median = 317.329 ms, Q3 = 319.639 ms, Max = 322.463 ms
IQR = 4.115 ms, LowerFence = 309.350 ms, UpperFence = 325.812 ms
ConfidenceInterval = [314.651 ms; 320.698 ms] (CI 99.9%), Margin = 3.023 ms (0.95% of Mean)
Skewness = 0.37, Kurtosis = 1.68, MValue = 2
-------------------- Histogram --------------------
[313.284 ms ; 323.872 ms) | @@@@@@@@@@@@@
---------------------------------------------------

// * Summary *

BenchmarkDotNet=v0.12.1, OS=Windows 10.0.19042
Intel Core i7-9700K CPU 3.60GHz (Coffee Lake), 1 CPU, 8 logical and 8 physical cores
.NET Core SDK=5.0.104
  [Host]     : .NET Core 5.0.5 (CoreCLR 5.0.521.16609, CoreFX 5.0.521.16609), X64 RyuJIT
  DefaultJob : .NET Core 5.0.5 (CoreCLR 5.0.521.16609, CoreFX 5.0.521.16609), X64 RyuJIT


|             Method |     Mean |   Error |  StdDev | Rank | Gen 0 | Gen 1 | Gen 2 | Allocated |
|------------------- |---------:|--------:|--------:|-----:|------:|------:|------:|----------:|
| GetSolverBenchmark | 317.7 ms | 3.02 ms | 2.52 ms |    1 |     - |     - |     - |     288 B |

// * Hints *
Outliers
  KnapsackSolverBenchmark.GetSolverBenchmark: Default -> 2 outliers were removed (328.28 ms, 331.73 ms)

// * Legends *
  Mean      : Arithmetic mean of all measurements
  Error     : Half of 99.9% confidence interval
  StdDev    : Standard deviation of all measurements
  Rank      : Relative position of current benchmark mean among all benchmarks (Arabic style)
  Gen 0     : GC Generation 0 collects per 1000 operations
  Gen 1     : GC Generation 1 collects per 1000 operations
  Gen 2     : GC Generation 2 collects per 1000 operations
  Allocated : Allocated memory per single operation (managed only, inclusive, 1KB = 1024B)
  1 ms      : 1 Millisecond (0.001 sec)

// * Diagnostic Output - MemoryDiagnoser *


// ***** BenchmarkRunner: End *****
// ** Remained 0 benchmark(s) to run **
Run time: 00:00:08 (8.37 sec), executed benchmarks: 1

Global total time: 00:00:11 (11.33 sec), executed benchmarks: 1
// * Artifacts cleanup *
